# 0x452 Speech Synthesis

## Concatenative TTS

The basic unit-selection premise is that we can synthesize new natural-sounding utterances by selecting appropriate sub-word units from a database of natural speech. The subword units might be frame, HMM state, half-phone, diphone, etc.

There are two costs to consider when concatenating units.

**Target cost** is about how well a candidate unit from the database matches the required units.

$$C_{target}(t_i, u_i) = \sum_j w_j C^{target}_j(t_i, u_i)$$

where $u_i$ is a candidate unit and $t_i$ is a required unit and $j$ sums over the features (e.g: phonetic, prosodic contexts.)

The other cost is **Concatenative cost**, which defines how well two selected units combines

$$C_{concat}(u_{i-1}, u_i) = \sum_k w_k C^{concat}_k(u_{i-1}, u_i)$$

where $k$ sums over the features (e.g: spectral and acoustic features)


The goal is to find a string of units $u=\{ u_1, ..., u_n \}$ from the database that minimizes the overall costs

$$\hat{u} = \text{argmin}_u \sum_i C_{target}(t_i, u_i) + C_{concat}(u_{i-1}, u_i)$$


![concatenation](../../img/concatenation.png)


## Parametric TTS
Statistical parametric speech synthesis might be most simply described as generating the
average of some sets of similarly sounding speech segments.

In a typical parametric system, the steps are

We first extract parametric representations of speech (e.g: spectral, excitation) and model them using a generative model (e.g.: HMM), estimated with MLE

$$\hat{lambda} = \text{argmax}(P(O | W, \lambda))$$

where $\lambda$ is the parameter, $O$ is the training set and $W$ is the word sequence of $O$

When we want to generate a speech, we use the estimated parameter $\hat{lambda}$ and target words $w$.

$$\hat{o} = \text{argmax}(P(o | w, \hat{\lambda}))$$




## Neural TTS

## Reference
[1] [festvox book](http://festvox.org/bsv/book1.html)
[2] Zen, Heiga, Keiichi Tokuda, and Alan W. Black. "Statistical parametric speech synthesis." speech communication 51.11 (2009): 1039-1064.
[3] Taylor, Paul. Text-to-speech synthesis. Cambridge university press, 2009.
